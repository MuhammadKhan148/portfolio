;/*FB_PKG_DELIM*/

__d("IEBAPI",["MAWBridge"],(function(a,b,c,d,e,f,g){"use strict";c=1;function a(a){return function(){for(var b=arguments.length,c=new Array(b),e=0;e<b;e++)c[e]=arguments[e];return d("MAWBridge").getBridge().sendAndReceive("backend","ebapi",{args:c,type:a})}}function b(a){return function(){for(var b=arguments.length,c=new Array(b),e=0;e<b;e++)c[e]=arguments[e];return d("MAWBridge").getBridge().sendAndReceive("backend","minosEBAPI",{args:c,type:a})}}g.version=c;g.makeBridgedApi=a;g.makeMinosBridgedApi=b}),98);
__d("EBMinosBridgedAPI",["IEBAPI"],(function(a,b,c,d,e,f,g){"use strict";a={writeMinosMailboxKeysForRecipient:d("IEBAPI").makeMinosBridgedApi("writeMinosMailboxKeysForRecipient")};b=a;g["default"]=b}),98);
__d("EBMinosVerifySingleEpoch",["EBAPIMinosVerifySingleEpoch","I64","Promise","asyncToGeneratorRuntime"],(function(a,b,c,d,e,f,g){"use strict";var h,i;function a(a,b,c,d,e,f,g,h){return j.apply(this,arguments)}function j(){j=b("asyncToGeneratorRuntime").asyncToGenerator(function*(a,c,e,f,g,j,k,l){a=(yield d("EBAPIMinosVerifySingleEpoch").minosVerifySingleEpoch({minosEpochAnonId:a,minosMailboxAuthPublicKey:g,minosMailboxEncryptionPublicKey:f,minosMailboxSigningPublicKey:e,previousEpochHead:j,qplFlow:l,selfEpochSignature:k,userId:(i||(i=d("I64"))).to_string(c)}));return(h||(h=b("Promise"))).resolve([a])});return j.apply(this,arguments)}g.minosVerifySingleEpoch=a}),98);
__d("EBWriteMinosMailboxKeysToCache",["EBMinosBridgedAPI","EBMinosQplFlow","I64","Promise","WAGetSafeQPLError","WALogger","WALongInt","WATimeUtils","promiseDone"],(function(a,b,c,d,e,f,g){"use strict";var h,i;function j(){var a=babelHelpers.taggedTemplateLiteralLoose(["[labyrinth_web minos] error writing minos mailbox keys to cache: ",""]);j=function(){return a};return a}function a(a,e,f,g,k,l,m,n,o,p){var q=d("EBMinosQplFlow").startMinosWritePublicKeysQpl();if(e==null||f==null||g==null||k==null||m==null||n==null||o==null||l==null){q.addAnnotations({bool:{hasMinosMailboxKeys:!1}});q.endSuccess();return(i||(i=b("Promise"))).resolve()}q.addAnnotations({bool:{hasMinosMailboxKeys:!0}});c("promiseDone")(c("EBMinosBridgedAPI").writeMinosMailboxKeysForRecipient({id:(h||(h=d("I64"))).to_string(a),minosEncryptionPublicKey:g,minosEpochAnonId:e,minosEpochHead:k,minosEpochHeadCreationTime:d("WATimeUtils").castLongIntToUnixTime(d("WALongInt").decimalStringToLongInt(h.to_string(f))),minosEpochSignatureSelf:m,minosMailboxAuthPubKey:n,minosMailboxSigningPubKey:o,minosPreviousEpochHead:p,minosPublicKeyFBID:h.to_string(l)}),function(){q.endSuccess()},function(a){d("WALogger").ERROR(j(),a),q.endFailWithError("runtime-error",d("WAGetSafeQPLError").getSafeQPLErrorMessage(a))});return(i||(i=b("Promise"))).resolve()}g.writeMinosMailboxKeysToCache=a}),98);